/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt local connectivty modules.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\ingroup technology-apis
\title Qt Bluetooth Module
\page qtbluetooth-overview.html
\brief The Qt Bluetooth API enables connectivity with other Bluetooth enabled devices.

\tableofcontents

\section1 Overview

Bluetooth is a short-range (less than 100 meters) wireless
technology. It has a reasonably high data transfer rate of 2.1 Mbit/s, which
makes it ideal for transfering data between devices.

Bluetooth connectivity is based on basic device management like scanning for
devices and gathering information about them. On top of that, there are a
number of profiles which enable a certain specified interaction type on
the Bluetooth connection.

    With the Qt Bluetooth API typical use cases are:

        \list
        \li Retrieve information about the local Bluetooth device.
        \li Scan for other Bluetooth devices in range and retrieve information about them.
        \li Push files to remote devices using the Obex Object Push Profile (OPP).
        \li Connect to remote devices through a RFCOMM channel using the Serial Port Profile (SPP).
        \li Create a RFCOMM server that allows incoming connections using SPP.
        \endlist


    The following documentation leads you through what
    you can do, getting started, some simple examples and tutorials.

    \section1 Getting Started
    As shown in the above list, the Qt Bluetooth API has three main purposes. The first one is to
    obtain local and remote device information. The first steps in retrieving device information is
    to check if Bluetooth is available on the device and read the local device address and name. The
    QBluetoothLocalDevice is the one to provide all of this information. Additionally you can use it
    to turn Bluetooth on and off and set the visibility on the device.

    \snippet ../doc/src/snippets/doc_src_qtbluetooth.cpp turningon

    Similar to the QBluetoothLocalDevice, the API offers QBluetoothDeviceInfo which provides
    that information for remote devices. While you can just create QBluetoothDeviceInfo objects on
    your own and fill them with data, the easier way is to use the QBluetoothDeviceDiscoveryAgent to
    start an automated search for visible Bluetooth devices within the connectable range.

    \snippet ../doc/src/snippets/doc_src_qtbluetooth.cpp discovery

    Once the desired device is found, there are two main use cases provided by Qt Bluetooth. The
    simpler is to send files via the Obex Object Push Profile (OPP). As the name describes, this
    profile can only push files from one device to another but not pull files or browse the remote
    file system. Because of this limitation, this profile does not require the two devices to be
    paired before exchanging data. To push files to remote devices, create a
    QBluetoothTransferRequest and ask the QBluetoothTransferManager to push the file contained in
    the request by calling the put() function.

    \snippet ../doc/src/snippets/doc_src_qtbluetooth.cpp sendfile

    The more flexible approach to do communication between two Bluetooth enabled devices, is to
    create a virtual serial port connection and freely exchange data over that connection. This can
    be done by the Serial Port Profile (SPP). The Serial Port Profile emulates a serial connection
    over the Bluetooth transport protocol RFCOMM.

    To be able to create SPP connections, you need to register a Server one one device by using
    QRfcommServer.

    \snippet ../examples/btchat/chatserver.cpp Create the server

    Connect to this server from another device playing the client role by using a
    QBluetoothSocket.

    \snippet ../examples/btchat/chatclient.cpp startClient

    Using such a connection allows to exchange any form of data in both directions.
    It is perfectly suited for use cases like gaming or syncing the state between two instances of
    an application on two devices. For more detailed descriptions on how to configure the server
    and client, please refer to the detailed description sections in the QRfcommServer and
    QBluetoothSocket classes. A good example to start with SPP is the \l{btchat}{Bluetooth Chat}
    example.

    To get started with adding the Qt Bluetooth API to your project, see the
    \l{Qt Bluetooth Examples}{Examples} or check out the \l{Qt Bluetooth QML API}{QML} and
    \l{Qt Bluetooth C++ API}{C++} API's with their "Getting started" sections.

    \section2 QML API

    There are a number of QML Types available in the Qt Bluetooth API.

    \list
        \li \l {Qt Bluetooth QML API}{Qt Bluetooth QML API}
    \endlist

    \section2 C++ API

    The Qt Bluetooth C++ API requires gives a bit more flexibility on how
    to interact with remote devices.

    \list
        \li \l {Qt Bluetooth C++ API} {Qt Bluetooth C++ API}.
    \endlist

*/
